//Notation for Skiylia

//vertical bar implies choices
// rule > option 1 | option 2 | option 3
//ie: option 1; or option 2

//Parentheses implies a grouping, speech marks means that must appear exactly
// rule > (option 1 | option 2) "done"
//ie: option 1 done

//Asterisk implies what it is attatched to repeats zero or more times
// rule > "test" "example"*
//ie: test example example example; or even test

//Plus implies what it is attatched to repeats one or more times
// rule > "test"+
//ie: test; or test test test test test

//Question mark implies something appears exactly zero or one times
// rule > (option 1 | option 2)? "done"
//ie: option1 "done"; or "done"; option1 option2 "done" not allowed


//The entire grammar of Skiylia in EBNF Form
{Block token}     > ":"
{End token}       > '\n'

program           > declaration* EOF

declaration       > vardeclaration | statement

vardeclaration    > ("var" Idenitifer ( "=" expression )? ) "\n"+     <=explicit requires "var"

statement         > exprstmt | ifstmt | printstmt | block

block             > {Indent level increases} declaration {End token}+ {token with lower indentation}

exprstmt          > expression {End token}+

ifstmt            > "if" expression {Block token}? statement ("else" statement)?

printstmt         > "print" "(" expression ")" {End token}+

expression        > assignment

assignment        > Identifier "=" assignment | logicalOr

//Logical or has the highest precedence (and is computed last)
logicalOr         > logicalXor ( "||" logicalXor )*

logicalXor        > logicalAnd ( "^^" logicalAnd )*

logicalAnd        > equality ( ( "&&" ) equality )*

equality          > comparison ( ( "!=" | "==" ) comparison )*

//Then comparisons
comparison        > term ( ( ">" | "<" ) term )*

//Then terms
term              > factor ( ( "-" | "+" ) factor )*

//Then factors
factor            > unary ( ( "*" | "/" ) unary )*

//And finally unary has the lowest precedence (and are computed first)
unary             > ( "!" | "-" ) unary | literal

literal           > Number | String | "true" | "false" | "null" | "(" expression ")" | Identifier
