//Notation for Skiylia

//vertical bar implies choices
// rule > option 1 | option 2 | option 3
//ie: option 1; or option 2

//Parentheses implies a grouping, speech marks means that must appear exactly
// rule > (option 1 | option 2) "done"
//ie: option 1 done

//Asterisk implies what it is attatched to repeats zero or more times
// rule > "test" "example"*
//ie: test example example example; or even test

//Plus implies what it is attatched to repeats one or more times
// rule > "test"+
//ie: test; or test test test test test

//Question mark implies something appears exactly zero or one times
// rule > (option 1 | option 2)? "done"
//ie: option1 "done"; or "done"; option1 option2 "done" not allowed


//The entire grammar of Skiylia in EBNF Form
{Block token}     > ":"
{End token}       > '\n'

program           > declaration* EOF

declaration       > functiondeclaration | vardeclaration | statement

funcdeclaration   > "def" function

function          > Identifier "(" parameters? ")" {Block token} block

parameters        > Identifier ( "," Identifier )*

vardeclaration    > ("var" Idenitifer ( "=" expression )? ) "\n"+     <=explicit requires "var"

statement         > exprstmt | forstmt | ifstmt | printstmt | whilestmt | block

block             > {Indent level increases} declaration {End token}+ {token with lower indentation}

exprstmt          > expression {End token}+

forstmt           > "for" (vardeclaration | exprstmt) ("when" expression)? ("do" expression)? {Block token} statement
//allowed for loop types 1) for x:    2) for x when x<=10:    3) for x when x<10 do x=x+2:    4) for x do x=x+2:

ifstmt            > "if" expression {Block token} statement ("else" statement)?

printstmt         > "print" "(" expression ")" {End token}+

whilestmt         > "while" expression {Block token} statement

expression        > assignment

assignment        > Identifier "=" assignment | logicalOr

//Logical or has the highest precedence (and is computed last)
logicalOr         > logicalXor ( "|" logicalXor )*

logicalXor        > logicalAnd ( "^" logicalAnd )*

logicalAnd        > equality ( ( "&" ) equality )*

equality          > comparison ( ( "!=" | "==" ) comparison )*

//Then comparisons
comparison        > term ( ( ">" | "<" ) term )*

//Then terms
term              > factor ( ( "-" | "+" ) factor )*

//Then factors
factor            > unary ( ( "*" | "/" ) unary )*

//then unaries
unary             > ( "!" | "-" ) unary | call

//And finally call has the lowest precedence (and is computed first)
call              > literal ( "(" arguments? ")" )*

arguments         > expression ( "," expression )*

literal           > Number | String | "true" | "false" | "null" | "(" expression ")" | Identifier
